<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:websocket="http://www.springframework.org/schema/websocket"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.2.xsd
http://www.springframework.org/schema/websocket
http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!-- Enable the method security to use the
         @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations
         in methods and secure it.
    -->

    <!-- secure the applicationÂ´s urls with the specific Role -->
    <http  auto-config="true"  create-session="always" use-expressions="true"  >
        <csrf disabled="true"/>
        <intercept-url pattern="/login" access="permitAll"/>
        <intercept-url pattern="/logout" access="permitAll"/>
        <intercept-url pattern="/accessdenied" access="permitAll"/>
        <intercept-url pattern="/menu" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_FLOOR_STAFF','ROLE_STAFF','ROLE_LINDA')"/>
        <intercept-url pattern="/register" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/additem" access="hasRole('ROLE_CHEF')"/>
        <intercept-url pattern="/balance" access="hasRole('ROLE_LINDA')"/>
        <intercept-url pattern="/edititem" access="hasRole('ROLE_CHEF')"/>
        <intercept-url pattern="/history" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_FLOOR_STAFF','ROLE_STAFF','ROLE_LINDA')"/>
        <intercept-url pattern="/factoryhistory" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_LINDA')"/>
        <intercept-url pattern="/lunch" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_FLOOR_STAFF','ROLE_STAFF','ROLE_LINDA')"/>
        <intercept-url pattern="/tea" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_FLOOR_STAFF','ROLE_STAFF','ROLE_LINDA')"/>
        <intercept-url pattern="/standard" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_FLOOR_STAFF','ROLE_STAFF','ROLE_LINDA')"/>
        <intercept-url pattern="/takeaway" access="hasAnyRole('ROLE_ADMIN','ROLE_CHEF','ROLE_FLOOR_STAFF','ROLE_STAFF','ROLE_LINDA')"/>
        <intercept-url pattern="/orders" access="hasRole('ROLE_CHEF')"/>
        <intercept-url pattern="/register" access="permitAll"/><!--hasRole('ROLE_ADMIN')"/>-->
        <intercept-url pattern="/viewmenu" access="hasRole('ROLE_CHEF')"/>


        <form-login login-page="/login"  authentication-failure-url="/accessdenied" authentication-success-handler-ref="successHandler"/>
        <logout logout-success-url="/login"/>
    </http>

    <beans:bean id="successHandler" class="Security.successHandler"/>

   <!-- <websocket-message-broker same-origin-disabled="true">

    </websocket-message-broker>-->

   <!-- <beans:bean id="websockets" class="Security.websocketConfig"/>-->
 <!--     Define the application authentication manager to use a custom Class (mongoUserDetailsService)
         to validate the user access, and the password enconding-->
    <authentication-manager alias="authenticationManager">

        <authentication-provider user-service-ref="mongoUserDetailsService">
            <password-encoder hash="plaintext"/>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="mongoUserDetailsService" class="Security.MongoUserDetailService"/>

</beans:beans>